Definitions:
    # test data
    data: {filename: asp/examples/data.lp}

    define: {filename: asp/define.lp}
    generate: {filename: asp/generate.lp}
    test: {filename: asp/test.lp}
    optimize: {filename: asp/optimize.lp}

    # program to test constraints
    no_opt: {group: [data, define, generate, test]}
    draco: {group: [data, define, generate, test, optimize]}

Test a implies b:
    Program: |
        b :- a.
        a.
        :- not b.
    Expect: SAT

Test program by itself is satisfiable:
    Modules: no_opt
    Expect: SAT

Test valid values:
    Modules: no_opt
    Expect: SAT

    Test channel:
        Program: |
            :- not channel(_,x).

    Test field:
        Program: |
            :- not field(_,s1).

    Test type:
        Program: |
            :- not type(_,q).

    Test aggregate:
        Program: |
            :- not aggregate(_,mean).

    Test bin:
        Program: |
            :- not bin(_,10).

    Test fieldtype:
        Program: |
            :- not fieldtype(_,string).

Test invalid values:
    Modules: no_opt
    Expect: UNSAT

    Test channel:
        Program: |
            :- not channel(_,foo).

    Test field:
        Program: |
            :- not field(_,foo).

    Test type:
        Program: |
            :- not type(_,foo).

    Test aggregate:
        Program: |
            :- not aggregate(_,foo).

    Test bin:
        Program: |
            :- not bin(_,-1).

    Test fieldtype:
        Program: |
            :- not fieldtype(_,foo).

Test constraints:
    Modules: no_opt

    Test can use binning:
        Program: |
            encoding(e).
            :- not bin(e,_).
        Expect: SAT

    Test can use aggregation:
        Program: |
            encoding(e).
            :- not aggregate(e,_).
        Expect: SAT

    Test can use aggregation and binning:
        Program: |
            encoding(e).
            :- not aggregate(e,_).
            :- not bin(e,_).
        Expect: UNSAT

    Test cannot use field with count:
        Program: |
            encoding(e).
            :- not aggregate(e,count).
            :- not field(e,n1).
        Expect: UNSAT

    Test can use string as o:
        Program: |
            encoding(e).
            :- not field(e,s1).
            :- not type(e,o).
        Expect: SAT

    Test cannot use string as q:
        Program: |
            encoding(e).
            :- not field(e,s1).
            :- not type(e,q).
        Expect: UNSAT

    Test cannot use temporal with string:
        Program: |
            encoding(e).
            field(e,s1).
            :- not type(e,t).
        Expect: UNSAT

    Test cannot bin temporal:
        Program: |
            fieldtype(d,date).
            encoding(e).
            field(e,d).
            :- not type(e,t).
            :- not bin(e,_).
        Expect: UNSAT

    Test cannot use log with string:
        Program: |
            encoding(e).
            field(e,s1).
            :- not log(e).
        Expect: UNSAT

    Test can log number:
        Program: |
            encoding(e).
            field(e,n1).
            :- not log(e).
        Expect: SAT

    Test cannot use log with binned data because becomes a dimension:
        Program: |
            encoding(e).
            :- not log(e).
            :- not bin(e).
        Expect: UNSAT

    Test cannot use zero with string:
        Program: |
            encoding(e).
            field(e,s1).
            :- not zero(e).
        Expect: UNSAT

    Test can zero number:
        Program: |
            encoding(e).
            field(e,n1).
            :- not zero(e).
        Expect: SAT

    Test cannot use zero with binned data because becomes a dimension:
        Program: |
            encoding(e).
            :- not zero(e).
            :- not bin(e).
        Expect: UNSAT

    Test can compute average of a number:
        Program: |
            encoding(e).
            field(e,n1).
            :- not aggregate(e,mean).
        Expect: SAT

    Test cannot compute average of a string:
        Program: |
            encoding(e).
            field(e,s1).
            :- not aggregate(e,mean).
        Expect: UNSAT

    Test cannot aggregate dimension:
        Program: |
            encoding(e).
            :- not aggregate(e,_).
            :- not dimensions(e).
        Expect: UNSAT

    Test can aggregate measure:
        Program: |
            encoding(e).
            :- not aggregate(e,_).
        Expect: SAT
