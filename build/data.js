import { extent } from "d3-array";
import { inferTypes } from "vega";
export class Data {
    static fromArray(arr) {
        const fields = getFieldsFromArr(arr);
        const inferredTypes = inferTypes(arr, fields);
        const schema = fields.reduce((schema, f) => {
            const descriptor = {
                type: inferredTypes[f],
                cardinality: getCardinalityFromArr(arr, f)
            };
            if (descriptor.type !== FieldType.STRING &&
                descriptor.type !== FieldType.BOOLEAN) {
                descriptor["extent"] = extent(arr, d => d[f]);
            }
            schema[f] = descriptor;
            return schema;
        }, {});
        const numRows = arr.length;
        let asp = [Data.getNumRowsDeclaration(numRows)];
        asp = fields.reduce((asp, f) => {
            asp.push(Data.getFieldDeclaration(f, schema[f].type));
            asp.push(Data.getCardinalityDeclaration(f, schema[f].cardinality));
            // TODO: figure out how to handle non ints
            if (schema[f].extent && schema[f].type === FieldType.INTEGER) {
                asp.push(Data.getExtentDeclaration(f, schema[f].extent[0], schema[f].extent[1]));
            }
            return asp;
        }, asp);
        return {
            fields,
            schema,
            numRows,
            asp: asp.join("\n"),
            data: arr
        };
    }
    static getNumRowsDeclaration(numRows) {
        return `num_rows(${numRows}).`;
    }
    static getFieldDeclaration(fieldName, fieldType) {
        return `fieldtype(${cleanFieldName(fieldName)},${fieldType}).`;
    }
    static getCardinalityDeclaration(fieldName, cardinality) {
        return `cardinality(${cleanFieldName(fieldName)},${cardinality}).`;
    }
    static getExtentDeclaration(fieldName, min, max) {
        if (!Number.isInteger(min) || !Number.isInteger(max)) {
            throw new Error(`Extent is yet supported for floats: ${min} ${max}`);
        }
        return `extent(${cleanFieldName(fieldName)},${min},${max}).`;
    }
}
function cleanFieldName(fieldName) {
    return `"${fieldName}"`;
}
function getFieldsFromArr(arr) {
    if (!arr) {
        return [];
    }
    return Object.keys(arr[0]);
}
function getCardinalityFromArr(arr, field) {
    const unique = arr.reduce((set, d) => {
        set.add(d[field]);
        return set;
    }, new Set());
    return unique.size;
}
export class FieldType {
}
FieldType.STRING = "string";
FieldType.BOOLEAN = "boolean";
FieldType.INTEGER = "integer";
FieldType.NUMBER = "number";
FieldType.DATE = "date";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQVVsQyxNQUFNLE9BQU8sSUFBSTtJQUNmLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBUTtRQUN2QixNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTlDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsTUFBTSxVQUFVLEdBQUc7Z0JBQ2pCLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixXQUFXLEVBQUUscUJBQXFCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzthQUMzQyxDQUFDO1lBRUYsSUFDRSxVQUFVLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxNQUFNO2dCQUNwQyxVQUFVLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxPQUFPLEVBQ3JDO2dCQUNBLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDL0M7WUFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO1lBRXZCLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVQLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFFM0IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENB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